import groovy.json.JsonSlurper

description = "Mongoose web storage mock"

buildscript {
	dependencies {
		classpath "com.google.gradle:osdetector-gradle-plugin:1.4.0"
	}
	repositories {
		mavenCentral()
	}
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "signing"
apply plugin: "com.google.osdetector"

group = "com.github.emc-mongoose"
version = defineVersion()

tasks.withType(JavaCompile) {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

task("create-dirs").doLast(
	{
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}
)

repositories {
	mavenCentral()
}

ext {

	depVersion = [
		commonsCodec      : "1.10",
		commonsCollections: "4.1",
		commonsLang       : "2.6",
		disruptor         : "3.3.4",
		jackson           : "2.8.4",
		javassist         : "3.21.0-GA",
		log4j             : "2.7",
		metrics           : "3.1.2",
		netty             : "4.1.6.Final",
	]

	setClassPath = {
		configurations -> [
			configurations.runtime
				.collect { file ->
				// it's 3rd party if jar file name doesn't contain the root project name
				if(-1 == file.name.indexOf(rootProject.name)) {
					["lib", file.name].join(File.separator)
				} else {
					file.name
				}
			}
			.join(" "),
		]
			.join(" ")
	}
}

dependencies {
	compile(
		"com.github.emc-mongoose:mongoose-common:3.3+",
		"com.github.emc-mongoose:mongoose-model:3.3+",
		"com.github.emc-mongoose:mongoose-storage-driver-net:3.3+",
		"com.github.emc-mongoose:mongoose-ui:3.3+",

		"commons-lang:commons-lang:${depVersion.commonsLang}",
		"org.apache.commons:commons-collections4:${depVersion.commonsCollections}",
		"commons-codec:commons-codec:${depVersion.commonsCodec}",
		"io.dropwizard.metrics:metrics-core:${depVersion.metrics}",

		"org.apache.logging.log4j:log4j-api:${depVersion.log4j}",
		"org.apache.logging.log4j:log4j-core:${depVersion.log4j}",

		"com.fasterxml.jackson.core:jackson-databind:${depVersion.jackson}",

		"io.netty:netty-common:${depVersion.netty}",
		"io.netty:netty-buffer:${depVersion.netty}",
		"io.netty:netty-transport:${depVersion.netty}",
		"io.netty:netty-handler:${depVersion.netty}",
		"io.netty:netty-codec-http:${depVersion.netty}",
		"io.netty:netty-transport-native-epoll:${depVersion.netty}:${osdetector.classifier}",

		"org.jmdns:jmdns:3.5.1"
	)

	runtime(
		"com.lmax:disruptor:${depVersion.disruptor}",
		"org.apache.logging.log4j:log4j-jul:${depVersion.log4j}",
		"org.javassist:javassist:${depVersion.javassist}",
	)
}

jar {
	manifest {
		attributes(
			"Class-Path": setClassPath(configurations),
			"Main-Class": "com.emc.mongoose.storage.mock.Main"
		)
	}
}

task dist(type: Tar) {
	group = "distribution"
	description = "Generate Nagaina distribution tarball"
	dependsOn tasks.withType(Jar)
	baseName = rootProject.name
	compression = Compression.GZIP
	destinationDir = new File("build", "dist")
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	into("$baseName-$rootProject.version") {
		into("config") {
			from { "config" }
		}
		into("lib") {
			from configurations.runtime {
				exclude "${rootProject.name}*.jar"
			}
		}
		from jar.outputs.files
	}
}

String defineVersion() {
	def configFilePath = [rootDir, "config", "defaults.json"].join(File.separator);
	def inputFile = new File(configFilePath)
	def json = new JsonSlurper().parseText(inputFile.text)
	json.version
}
